import{a as F}from"./chunk-SJBU3H5Y.mjs";import"./chunk-3HWDMON2.mjs";import"./chunk-2I7XES37.mjs";import"./chunk-LNTMWDPX.mjs";import"./chunk-WSJANNVG.mjs";import"./chunk-6KMKD42J.mjs";import k from"dayjs";import{v4 as h}from"uuid";import m from"fs";import c from"path";import S from"dayjs/plugin/customParseFormat";k.extend(S);function b(e,a){try{let t=e.filename.slice(0,-4),n=t+".json",u=m.readFileSync(c.join(e.mainFolder,e.filename),"utf-8");if(!u)return a(null,"empty log");let o=new F(e.meterData,!1);e.splitOnPhaseTransition===!0&&(o.splitOnPhaseTransition=!0);let P=u.split(`
`).filter(r=>r!=null&&r!="");for(let r of P)o.parseLogLine(r);o.splitEncounter();let f=o.encounters;if(f.length>0){let r={encounters:[]};for(let i of f){let d=i.lastCombatPacket-i.fightStartedOn;if(d<=1e3)continue;let l={name:"",damageTaken:0,isPlayer:!1};i.entities.forEach(s=>{s.damageTaken>l.damageTaken&&(l={name:s.name,damageTaken:s.damageTaken,isPlayer:s.isPlayer})});let g={duration:d,mostDamageTakenEntity:l},p=h(),y=`${t}_${p}_encounter.json`;r.encounters.push({encounterId:p,encounterFile:y,...g}),m.writeFileSync(c.join(e.parsedLogFolder,y),JSON.stringify({...i,...g},T))}return m.writeFileSync(c.join(e.parsedLogFolder,n),JSON.stringify(r)),a(null,"log parsed")}return a(null,"no encounters found")}catch(t){return a(t,"log parser error")}function T(t,n){return n instanceof Map?{dataType:"Map",value:Array.from(n.entries())}:n instanceof Set?{dataType:"Set",value:Array.from(n.values())}:n}}export{b as fileParserWorker};
